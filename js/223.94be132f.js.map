{"version":3,"file":"js/223.94be132f.js","mappings":"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","sources":["webpack://jeux-educatifs/./src/views/Game4.vue","webpack://jeux-educatifs/./src/views/Game4.vue?00e7"],"sourcesContent":["<template>\n  <div class=\"game-container\">\n    <h1>Course de Voitures</h1>\n\n    <div class=\"instructions\" v-if=\"!raceStarted\">\n      <p>Choisis une voiture sur laquelle parier, puis clique sur le drapeau vert pour démarrer la course!</p>\n    </div>\n\n    <div class=\"betting-section\" v-if=\"!raceStarted\">\n      <div class=\"car-options\">\n        <div \n          v-for=\"(car, index) in cars\" \n          :key=\"index\" \n          class=\"car-option\"\n          :class=\"{ 'selected': selectedCar === car.color }\"\n          @click=\"selectCar(car.color)\"\n        >\n          <div class=\"car-preview\" :style=\"{ backgroundColor: car.color }\"></div>\n          <p>{{ car.name }}</p>\n        </div>\n      </div>\n\n      <button \n        @click=\"startRace\" \n        class=\"start-button\" \n        :disabled=\"!selectedCar\"\n      >\n        <span class=\"flag\">🚩</span> Démarrer la course\n      </button>\n    </div>\n\n    <div class=\"race-track-container\">\n      <canvas ref=\"raceTrack\" width=\"1000\" height=\"1000\" class=\"race-track\"></canvas>\n      {{cars[0].position}}\n    </div>\n\n    <div v-if=\"raceFinished\" class=\"podium-container\">\n      <h2>Résultats de la course</h2>\n      <div class=\"podium\">\n        <div class=\"podium-place second-place\">\n          <div class=\"car-icon\" :style=\"{ backgroundColor: finishOrder[1]?.color }\"></div>\n          <div class=\"place-number\">2</div>\n        </div>\n        <div class=\"podium-place first-place\">\n          <div class=\"car-icon\" :style=\"{ backgroundColor: finishOrder[0]?.color }\"></div>\n          <div class=\"place-number\">1</div>\n        </div>\n        <div class=\"podium-place third-place\">\n          <div class=\"car-icon\" :style=\"{ backgroundColor: finishOrder[2]?.color }\"></div>\n          <div class=\"place-number\">3</div>\n        </div>\n      </div>\n\n      <div class=\"result-message\">\n        <h2 v-if=\"playerWon\">Bravo! Tu as gagné!</h2>\n        <h2 v-else>Dommage! Tu as perdu.</h2>\n        <p v-if=\"playerWon\">Ta voiture {{ getCarName(selectedCar) }} a gagné la course!</p>\n        <p v-else>La voiture {{ getCarName(finishOrder[0]?.color) }} a gagné la course.</p>\n        <button @click=\"resetGame\" class=\"reset-button\">Rejouer</button>\n        <router-link to=\"/\" class=\"home-button\">Menu Principal</router-link>\n      </div>\n    </div>\n\n    <Fireworks v-if=\"raceFinished && playerWon\" ref=\"fireworks\" class=\"fireworks-container\" />\n  </div>\n</template>\n\n<script>\nimport { Fireworks } from '@fireworks-js/vue'\n\nexport default {\n  name: 'RaceGame',\n  components: {\n    Fireworks\n  },\n  data() {\n    return {\n      cars: [\n        { color: 'red', name: 'Rouge', position: 0, angle: 0, speed: 0, finished: false, lap: 0 },\n        { color: 'blue', name: 'Bleue', position: 0, angle: 0, speed: 0, finished: false, lap: 0 },\n        { color: 'green', name: 'Verte', position: 0, angle: 0, speed: 0, finished: false, lap: 0 },\n        { color: 'gold', name: 'Jaune', position: 0, angle: 0, speed: 0, finished: false, lap: 0 }\n      ],\n      selectedCar: null,\n      raceStarted: false,\n      raceFinished: false,\n      playerWon: false,\n      finishOrder: [],\n      animationId: null,\n      trackLength: 0,\n      fireworksTimer: null,\n      ctx: null,\n      trackPath: [],\n      centerX: 0,\n      centerY: 0\n    }\n  },\n  mounted() {\n    this.initializeCanvas();\n    this.loadImages();\n  },\n  beforeUnmount() {\n    this.stopRace();\n    if (this.fireworksTimer) {\n      clearTimeout(this.fireworksTimer);\n    }\n  },\n  methods: {\n    initializeCanvas() {\n      const canvas = this.$refs.raceTrack;\n      this.ctx = canvas.getContext('2d');\n\n      // Set center of the canvas\n      this.centerX = canvas.width / 2;\n      this.centerY = canvas.height / 2;\n\n      // Calculate track length for the oval track\n      // Reduce radius to ensure the entire track is visible within the canvas\n      const radius = Math.min(canvas.width, canvas.height) * 0.35; \n      // Approximate length of oval using the formula 2π * sqrt((a² + b²)/2) where a and b are the semi-major and semi-minor axes\n\n      this.trackLength = 300;\n\n      // Create track path points for oval\n      this.createTrackPath(radius);\n    },\n\n    createTrackPath(radius) {\n      this.trackPath = [];\n\n      // Create points for an oval track\n      const steps = 100; // Number of points to create a smooth path\n      const ovalWidth = radius * 1.2;\n      const ovalHeight = radius;\n\n      for (let i = 0; i < steps; i++) {\n        const angle = (i / steps) * Math.PI * 2;\n\n        // Oval parametric equations\n        const x = this.centerX + ovalWidth * Math.cos(angle);\n        const y = this.centerY + ovalHeight * Math.sin(angle);\n\n        this.trackPath.push({ x, y, angle });\n      }\n    },\n    loadImages() {\n      // Draw the track directly without loading an image\n      this.drawTrack();\n    },\n    selectCar(color) {\n      this.selectedCar = color;\n    },\n    getCarName(color) {\n      const car = this.cars.find(c => c.color === color);\n      return car ? car.name : '';\n    },\n    startRace() {\n      if (!this.selectedCar) return;\n\n      this.raceStarted = true;\n\n      // Reset car positions and speeds\n      this.cars.forEach(car => {\n        car.position = 0;\n        car.angle = 0;\n        car.speed = 0;\n        car.finished = false;\n        car.lap = 0;\n      });\n\n      this.finishOrder = [];\n      this.raceFinished = false;\n      this.playerWon = false;\n\n      // Start animation\n      this.animateRace();\n    },\n    animateRace() {\n      // Clear previous animation frame\n      if (this.animationId) {\n        cancelAnimationFrame(this.animationId);\n      }\n\n      const animate = () => {\n        this.updateCarPositions();\n        this.drawTrack();\n        this.drawCars();\n\n        // Check if race is finished\n        if (this.finishOrder.length < 4 && this.raceStarted) {\n          this.animationId = requestAnimationFrame(animate);\n        } else if (this.finishOrder.length === 4 && !this.raceFinished) {\n          this.finishRace();\n        }\n      };\n\n      this.animationId = requestAnimationFrame(animate);\n    },\n    updateCarPositions() {\n      this.cars.forEach(car => {\n        if (car.finished) return;\n\n        // Random acceleration with some variability to create suspense\n        // Reduced acceleration for slower race\n        const acceleration = Math.random() * 0.02 + 0.005;\n\n        // Add some randomness to create overtaking and suspense\n        // Reduced randomness for more predictable movement\n        const randomFactor = Math.random() * 0.15 - 0.075; // -0.075 to 0.075\n\n        car.speed += acceleration + randomFactor;\n\n        // Add more drag to slow down cars\n        car.speed *= 0.9;\n\n        // Ensure minimum speed (reduced)\n        car.speed = Math.max(car.speed, 0.02);\n\n        // Update position along the track path\n        car.position += car.speed;\n\n        // Calculate the index in the track path\n        const pathIndex = Math.floor(car.position % this.trackPath.length);\n        const nextPathIndex = (pathIndex + 1) % this.trackPath.length;\n\n        // Get the current point and next point on the track\n        const currentPoint = this.trackPath[pathIndex];\n        const nextPoint = this.trackPath[nextPathIndex];\n\n        // Calculate car's angle based on direction between points\n        car.angle = Math.atan2(\n          nextPoint.y - currentPoint.y,\n          nextPoint.x - currentPoint.x\n        );\n\n        // Check if car has completed a lap\n        if (car.position >= this.trackLength && !car.finished) {\n          car.lap += 1;\n\n          // After completing one lap, mark as finished\n          if (car.lap >= 1) {\n            car.finished = true;\n            this.finishOrder.push(car);\n          }\n        }\n      });\n    },\n    drawTrack() {\n      const canvas = this.$refs.raceTrack;\n      const ctx = this.ctx;\n\n      // Clear canvas\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Draw track background\n      ctx.fillStyle = '#f0f0f0';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      // Track width\n      const trackWidth = 100; // Adjusted for 1200x1200 canvas\n\n      // Draw the oval track\n      ctx.beginPath();\n      ctx.moveTo(this.trackPath[0].x, this.trackPath[0].y);\n\n      for (let i = 1; i < this.trackPath.length; i++) {\n        ctx.lineTo(this.trackPath[i].x, this.trackPath[i].y);\n      }\n\n      // Close the path by connecting back to the first point\n      ctx.lineTo(this.trackPath[0].x, this.trackPath[0].y);\n\n      // Set track style\n      ctx.strokeStyle = '#d0d0d0';\n      ctx.lineWidth = trackWidth;\n      ctx.stroke();\n\n      // Draw outer track (asphalt)\n      ctx.beginPath();\n      ctx.moveTo(this.trackPath[0].x, this.trackPath[0].y);\n\n      for (let i = 1; i < this.trackPath.length; i++) {\n        ctx.lineTo(this.trackPath[i].x, this.trackPath[i].y);\n      }\n\n      // Close the path\n      ctx.lineTo(this.trackPath[0].x, this.trackPath[0].y);\n\n      ctx.strokeStyle = '#888';\n      ctx.lineWidth = trackWidth + 8; // Reduced outer track width for 1200x1200 canvas\n      ctx.stroke();\n\n      // Draw start/finish line\n      this.drawStartFinishLine(ctx, trackWidth);\n    },\n\n    drawRumbleStrips(ctx, trackWidth) {\n      // Identify curve sections (where the track changes direction significantly)\n      const curvePoints = [];\n\n      // Find points where the track curves the most\n      for (let i = 0; i < this.trackPath.length; i++) {\n        const prev = this.trackPath[(i - 1 + this.trackPath.length) % this.trackPath.length];\n        const current = this.trackPath[i];\n        const next = this.trackPath[(i + 1) % this.trackPath.length];\n\n        // Calculate angle change to detect curves\n        const dx1 = current.x - prev.x;\n        const dy1 = current.y - prev.y;\n        const dx2 = next.x - current.x;\n        const dy2 = next.y - current.y;\n\n        const angle1 = Math.atan2(dy1, dx1);\n        const angle2 = Math.atan2(dy2, dx2);\n\n        // If angle change is significant, it's a curve\n        if (Math.abs(angle1 - angle2) > 0.2) {\n          curvePoints.push(i);\n        }\n      }\n\n      // Draw red and white rumble strips at curve points\n      for (const pointIndex of curvePoints) {\n        const point = this.trackPath[pointIndex];\n\n        // Draw a small red and white striped section\n        ctx.save();\n        ctx.translate(point.x, point.y);\n\n        // Determine angle of the track at this point\n        const nextPoint = this.trackPath[(pointIndex + 1) % this.trackPath.length];\n        const angle = Math.atan2(nextPoint.y - point.y, nextPoint.x - point.x);\n        ctx.rotate(angle);\n\n        // Draw alternating red and white stripes\n        const stripeWidth = 10;\n        const stripeCount = 5;\n        const totalWidth = stripeWidth * stripeCount * 2;\n\n        for (let i = 0; i < stripeCount; i++) {\n          // Red stripe\n          ctx.fillStyle = '#ff0000';\n          ctx.fillRect(-totalWidth/2 + i * stripeWidth * 2, -trackWidth/2 - 5, stripeWidth, 10);\n\n          // White stripe\n          ctx.fillStyle = '#ffffff';\n          ctx.fillRect(-totalWidth/2 + i * stripeWidth * 2 + stripeWidth, -trackWidth/2 - 5, stripeWidth, 10);\n\n          // Bottom side of track\n          ctx.fillStyle = '#ff0000';\n          ctx.fillRect(-totalWidth/2 + i * stripeWidth * 2, trackWidth/2 - 5, stripeWidth, 10);\n\n          ctx.fillStyle = '#ffffff';\n          ctx.fillRect(-totalWidth/2 + i * stripeWidth * 2 + stripeWidth, trackWidth/2 - 5, stripeWidth, 10);\n        }\n\n        ctx.restore();\n      }\n    },\n\n    drawStartFinishLine(ctx, trackWidth) {\n      // Draw start/finish line at the center bottom of the track\n      const startPoint = this.trackPath[0]; // First point is at the bottom center\n\n      ctx.save();\n      ctx.translate(startPoint.x, startPoint.y);\n\n      // Draw black and white checkered pattern\n      const squareSize = 10;\n      const squares = Math.floor(trackWidth / squareSize);\n\n      for (let i = 0; i < squares; i++) {\n        ctx.fillStyle = i % 2 === 0 ? '#000' : '#fff';\n        ctx.fillRect(-trackWidth/2 + i * squareSize, -5, squareSize, 10);\n      }\n\n      ctx.restore();\n    },\n    drawCars() {\n      const ctx = this.ctx;\n\n      this.cars.forEach((car, index) => {\n        // Calculate the position on the track path\n        const pathIndex = Math.floor(car.position % this.trackPath.length);\n\n        // Get the point on the track\n        const point = this.trackPath[pathIndex];\n\n        // Calculate offset for each car to avoid overlap\n        // Create a perpendicular offset to the track direction\n        const offsetDistance = 15 * (index - 1.5); // -22.5, -7.5, 7.5, 22.5\n        const offsetAngle = car.angle + Math.PI/2; // Perpendicular to car direction\n\n        // Calculate the offset position\n        const offsetX = Math.cos(offsetAngle) * offsetDistance;\n        const offsetY = Math.sin(offsetAngle) * offsetDistance;\n\n        // Final car position with offset\n        const x = point.x + offsetX;\n        const y = point.y + offsetY;\n\n        // Save the current context state\n        ctx.save();\n\n        // Translate to the car position\n        ctx.translate(x, y);\n\n        // Rotate to match the car's direction\n        ctx.rotate(car.angle);\n\n        // Draw car body (centered at origin)\n        ctx.fillStyle = car.color;\n        ctx.fillRect(-20, -15, 40, 30);\n\n        // Draw car details\n        ctx.fillStyle = '#000';\n        ctx.fillRect(10, -10, 10, 20); // Front\n        ctx.fillRect(-15, -5, 20, 10); // Window\n\n        // Restore the context\n        ctx.restore();\n      });\n    },\n    finishRace() {\n      this.raceFinished = true;\n\n      // Check if player won\n      this.playerWon = this.finishOrder[0].color === this.selectedCar;\n\n      // Start fireworks if player won\n      if (this.playerWon) {\n        this.$nextTick(() => {\n          this.startFireworks();\n        });\n      }\n    },\n    startFireworks() {\n      if (this.$refs.fireworks) {\n        const fireworks = this.$refs.fireworks;\n        fireworks.updateOptions({\n          autoresize: true,\n          opacity: 0.5,\n          acceleration: 1.05,\n          friction: 0.97,\n          gravity: 1.5,\n          particles: 50,\n          traceLength: 3,\n          traceSpeed: 10,\n          explosion: 5,\n          intensity: 30,\n          flickering: 50,\n          lineStyle: 'round',\n          hue: {\n            min: 0,\n            max: 360\n          },\n          delay: {\n            min: 30,\n            max: 60\n          },\n          rocketsPoint: {\n            min: 50,\n            max: 50\n          },\n          lineWidth: {\n            explosion: {\n              min: 1,\n              max: 3\n            },\n            trace: {\n              min: 1,\n              max: 2\n            }\n          },\n          brightness: {\n            min: 50,\n            max: 80\n          },\n          decay: {\n            min: 0.015,\n            max: 0.03\n          },\n          mouse: {\n            click: false,\n            move: false,\n            max: 1\n          }\n        });\n        fireworks.start();\n\n        // Stop fireworks after 10 seconds\n        this.fireworksTimer = setTimeout(() => {\n          if (this.$refs.fireworks) {\n            this.$refs.fireworks.stop();\n          }\n        }, 10000);\n      }\n    },\n    stopRace() {\n      if (this.animationId) {\n        cancelAnimationFrame(this.animationId);\n        this.animationId = null;\n      }\n    },\n    resetGame() {\n      this.stopRace();\n\n      if (this.$refs.fireworks) {\n        this.$refs.fireworks.stop();\n      }\n\n      // Clear the fireworks timer if it exists\n      if (this.fireworksTimer) {\n        clearTimeout(this.fireworksTimer);\n        this.fireworksTimer = null;\n      }\n\n      this.selectedCar = null;\n      this.raceStarted = false;\n      this.raceFinished = false;\n      this.playerWon = false;\n      this.finishOrder = [];\n\n      // Reset car positions and speeds\n      this.cars.forEach(car => {\n        car.position = 0;\n        car.angle = 0;\n        car.speed = 0;\n        car.finished = false;\n        car.lap = 0;\n      });\n\n      this.drawTrack();\n    }\n  }\n}\n</script>\n\n<style scoped>\n.game-container {\n  max-width: 1240px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\nh1 {\n  color: #42b983;\n  margin-bottom: 30px;\n}\n\n.instructions {\n  margin-bottom: 20px;\n  font-size: 18px;\n}\n\n.betting-section {\n  margin-bottom: 30px;\n}\n\n.car-options {\n  display: flex;\n  justify-content: center;\n  gap: 20px;\n  margin-bottom: 20px;\n}\n\n.car-option {\n  border: 2px solid #ccc;\n  border-radius: 10px;\n  padding: 15px;\n  cursor: pointer;\n  text-align: center;\n  transition: all 0.3s ease;\n}\n\n.car-option:hover {\n  transform: scale(1.05);\n}\n\n.car-option.selected {\n  border-color: #42b983;\n  background-color: #f0f8f4;\n}\n\n.car-preview {\n  width: 60px;\n  height: 30px;\n  margin: 0 auto 10px;\n  border-radius: 5px;\n}\n\n.start-button {\n  background-color: #42b983;\n  color: white;\n  border: none;\n  padding: 12px 24px;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 18px;\n  display: block;\n  margin: 0 auto;\n}\n\n.start-button:disabled {\n  background-color: #ccc;\n  cursor: not-allowed;\n}\n\n.start-button:hover:not(:disabled) {\n  background-color: #3aa876;\n}\n\n.flag {\n  font-size: 20px;\n  margin-right: 8px;\n}\n\n.race-track-container {\n  margin: 30px auto;\n  width: 1000px;\n  height: 1000px;\n  max-width: 100%;\n  position: relative;\n}\n\n.race-track {\n  border: 2px solid #333;\n  border-radius: 10px;\n  display: block;\n  margin: 0 auto;\n  width: 100%;\n  height: 100%;\n}\n\n.podium-container {\n  margin-top: 40px;\n  text-align: center;\n}\n\n.podium {\n  display: flex;\n  justify-content: center;\n  align-items: flex-end;\n  height: 150px;\n  margin: 30px 0;\n}\n\n.podium-place {\n  width: 100px;\n  background-color: #f0f0f0;\n  border: 2px solid #333;\n  border-top: none;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding-top: 10px;\n}\n\n.first-place {\n  height: 120px;\n  z-index: 3;\n}\n\n.second-place {\n  height: 90px;\n  z-index: 2;\n}\n\n.third-place {\n  height: 60px;\n  z-index: 1;\n}\n\n.car-icon {\n  width: 40px;\n  height: 20px;\n  margin-bottom: 10px;\n  border-radius: 3px;\n}\n\n.place-number {\n  font-size: 24px;\n  font-weight: bold;\n}\n\n.result-message {\n  margin-top: 40px;\n  padding: 20px;\n  background-color: #f0f8f4;\n  border-radius: 10px;\n  animation: fadeIn 1s;\n}\n\n.result-message h2 {\n  color: #42b983;\n  margin-bottom: 10px;\n}\n\n.reset-button, .home-button {\n  background-color: #42b983;\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 16px;\n  margin: 10px;\n  display: inline-block;\n  text-decoration: none;\n}\n\n.reset-button:hover, .home-button:hover {\n  background-color: #3aa876;\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n\n.fireworks-container {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 10;\n  pointer-events: none;\n}\n</style>\n","import { render } from \"./Game4.vue?vue&type=template&id=0951be5a&scoped=true\"\nimport script from \"./Game4.vue?vue&type=script&lang=js\"\nexport * from \"./Game4.vue?vue&type=script&lang=js\"\n\nimport \"./Game4.vue?vue&type=style&index=0&id=0951be5a&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-0951be5a\"]])\n\nexport default __exports__"],"names":["class","ref","width","height","_createElementBlock","_hoisted_1","_createElementVNode","$data","raceStarted","_hoisted_2","_cache","_hoisted_3","_hoisted_4","_Fragment","_renderList","cars","car","index","key","_normalizeClass","selectedCar","color","onClick","$event","$options","selectCar","style","_normalizeStyle","backgroundColor","_toDisplayString","name","startRace","apply","arguments","disabled","_hoisted_7","_hoisted_8","position","raceFinished","_hoisted_9","_hoisted_10","_hoisted_11","_$data$finishOrder$","finishOrder","_hoisted_12","_$data$finishOrder$2","_hoisted_13","_$data$finishOrder$3","_hoisted_14","playerWon","_hoisted_15","_hoisted_16","_hoisted_17","getCarName","_hoisted_18","_$data$finishOrder$4","resetGame","_createVNode","_component_router_link","to","_createBlock","_component_Fireworks","components","Fireworks","data","angle","speed","finished","lap","animationId","trackLength","fireworksTimer","ctx","trackPath","centerX","centerY","mounted","this","initializeCanvas","loadImages","beforeUnmount","stopRace","clearTimeout","methods","canvas","$refs","raceTrack","getContext","radius","Math","min","createTrackPath","steps","ovalWidth","ovalHeight","i","PI","x","cos","y","sin","push","drawTrack","find","c","forEach","animateRace","_this","cancelAnimationFrame","animate","updateCarPositions","drawCars","length","requestAnimationFrame","finishRace","_this2","acceleration","random","randomFactor","max","pathIndex","floor","nextPathIndex","currentPoint","nextPoint","atan2","clearRect","fillStyle","fillRect","trackWidth","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","drawStartFinishLine","drawRumbleStrips","curvePoints","prev","current","next","dx1","dy1","dx2","dy2","angle1","angle2","abs","_i2","_curvePoints","pointIndex","point","save","translate","rotate","stripeWidth","stripeCount","totalWidth","restore","startPoint","squareSize","squares","_this3","offsetDistance","offsetAngle","offsetX","offsetY","_this4","$nextTick","startFireworks","_this5","fireworks","updateOptions","autoresize","opacity","friction","gravity","particles","traceLength","traceSpeed","explosion","intensity","flickering","lineStyle","hue","delay","rocketsPoint","trace","brightness","decay","mouse","click","move","start","setTimeout","stop","__exports__","render"],"sourceRoot":""}